{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useForm = (loginFunction, validate, isReset) => {\n  const [errors, setErrors] = useState({});\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  useEffect(() => {\n    // Checking if any error occurred during validation\n    // and if a form is still submitting\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      // If no errors and form still haven't been submitted\n      // We sign up or in the user according to the login function passed\n      loginFunction(); // Cleaning inputs after signup/in\n\n      setCredentials({\n        email: \"\",\n        password: \"\"\n      }); // Now that the form has been submitted we set isSubmitting back to false\n      // This prevents the form being submitted again and again each time useEffect is activated\n\n      setIsSubmitting(false);\n    }\n  }, [errors, isReset, isSubmitting, loginFunction]);\n\n  const handleSubmit = e => {\n    if (e) e.preventDefault();\n    setIsSubmitting(true); // Checking credentials for validation\n    // And passing validate output (which return eventual errors) into setErrors\n\n    setErrors(validate(credentials, isReset));\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setCredentials(credentials => ({ ...credentials,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return [credentials, handleChange, handleSubmit, errors];\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/The-Amazing-App/web-app/src/utils/useForm.js"],"names":["useState","useEffect","useForm","loginFunction","validate","isReset","errors","setErrors","credentials","setCredentials","email","password","isSubmitting","setIsSubmitting","Object","keys","length","handleSubmit","e","preventDefault","handleChange","persist","target","name","value"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,OAA1B,KAAsC;AACpD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC;AAAEU,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CAA9C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAIa,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,KAA+B,CAA/B,IAAoCJ,YAAxC,EAAsD;AACpD;AACA;AACAT,MAAAA,aAAa,GAHuC,CAKpD;;AACAM,MAAAA,cAAc,CAAC;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OAAD,CAAd,CANoD,CAQpD;AACA;;AACAE,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAfQ,EAeN,CAACP,MAAD,EAASD,OAAT,EAAkBO,YAAlB,EAAgCT,aAAhC,CAfM,CAAT;;AAiBA,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAIA,CAAJ,EAAOA,CAAC,CAACC,cAAF;AACPN,IAAAA,eAAe,CAAC,IAAD,CAAf,CAF0B,CAI1B;AACA;;AACAN,IAAAA,SAAS,CAACH,QAAQ,CAACI,WAAD,EAAcH,OAAd,CAAT,CAAT;AACD,GAPD;;AASA,QAAMe,YAAY,GAAIF,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACG,OAAF;AACAZ,IAAAA,cAAc,CAAED,WAAD,KAAkB,EAC/B,GAAGA,WAD4B;AAE/B,OAACU,CAAC,CAACI,MAAF,CAASC,IAAV,GAAiBL,CAAC,CAACI,MAAF,CAASE;AAFK,KAAlB,CAAD,CAAd;AAID,GAND;;AAQA,SAAO,CAAChB,WAAD,EAAcY,YAAd,EAA4BH,YAA5B,EAA0CX,MAA1C,CAAP;AACD,CAxCD;;AA0CA,eAAeJ,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (loginFunction, validate, isReset) => {\r\n  const [errors, setErrors] = useState({});\r\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Checking if any error occurred during validation\r\n    // and if a form is still submitting\r\n    if (Object.keys(errors).length === 0 && isSubmitting) {\r\n      // If no errors and form still haven't been submitted\r\n      // We sign up or in the user according to the login function passed\r\n      loginFunction();\r\n\r\n      // Cleaning inputs after signup/in\r\n      setCredentials({ email: \"\", password: \"\" });\r\n\r\n      // Now that the form has been submitted we set isSubmitting back to false\r\n      // This prevents the form being submitted again and again each time useEffect is activated\r\n      setIsSubmitting(false);\r\n    }\r\n  }, [errors, isReset, isSubmitting, loginFunction]);\r\n\r\n  const handleSubmit = (e) => {\r\n    if (e) e.preventDefault();\r\n    setIsSubmitting(true);\r\n\r\n    // Checking credentials for validation\r\n    // And passing validate output (which return eventual errors) into setErrors\r\n    setErrors(validate(credentials, isReset));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.persist();\r\n    setCredentials((credentials) => ({\r\n      ...credentials,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  return [credentials, handleChange, handleSubmit, errors];\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}