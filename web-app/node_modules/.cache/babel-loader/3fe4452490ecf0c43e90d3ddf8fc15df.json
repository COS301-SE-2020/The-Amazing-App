{"ast":null,"code":"import { SIGNUP_SUCCESS, SIGNUP_ERROR, SIGNIN_SUCCESS, SIGNIN_ERROR, EMAIL_NOT_VERIFIED, SIGNOUT_SUCCESS, SIGNOUT_ERROR, RESET_SUCCESS, RESET_ERROR } from \"./actionTypes\";\nimport { beginApiCall, apiCallError } from \"./apiStatus\";\nimport firebase from \"../../Config/fbConfig\"; // Signing up with Firebase\n\nexport const signup = (email, password, username) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    const db = firebase.firestore().collection(\"Users\");\n    firebase.auth().createUserWithEmailAndPassword(email, password, username).then(dataBeforeEmail => {\n      db.add({\n        Username: username,\n        Email: email\n      });\n      firebase.auth().onAuthStateChanged(function (user) {\n        user.sendEmailVerification();\n      });\n    }).then(dataAfterEmail => {\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          // Sign up successful\n          dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: \"Your account was successfully created! Now you need to verify your e-mail address, please go check your inbox.\"\n          });\n        } else {\n          // Signup failed\n          dispatch({\n            type: SIGNUP_ERROR,\n            payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n          });\n        }\n      });\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNUP_ERROR,\n        payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNUP_ERROR,\n      payload: \"Something went wrong, we couldn't create your account. Please try again.\"\n    });\n  }\n}; // Signing in with Firebase\n\nexport const signin = (email, password, callback) => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n      if (data.user.emailVerified) {\n        console.log(\"IF\", data.user.emailVerified);\n        dispatch({\n          type: SIGNIN_SUCCESS\n        });\n        callback();\n      } else {\n        console.log(\"ELSE\", data.user.emailVerified);\n        dispatch({\n          type: EMAIL_NOT_VERIFIED,\n          payload: \"You haven't verified your e-mail address.\"\n        });\n      }\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNIN_ERROR,\n        payload: \"Invalid login credentials\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNIN_ERROR,\n      payload: \"Invalid login credentials\"\n    });\n  }\n}; // Signing out with Firebase\n\nexport const signout = () => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: SIGNOUT_SUCCESS\n      });\n    }).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: SIGNOUT_ERROR,\n        payload: \"Error, we were not able to log you out. Please try again.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: SIGNOUT_ERROR,\n      payload: \"Error, we were not able to log you out. Please try again.\"\n    });\n  }\n}; // Reset password with Firebase\n\nexport const resetPassword = email => async dispatch => {\n  try {\n    dispatch(beginApiCall());\n    firebase.auth().sendPasswordResetEmail(email).then(() => dispatch({\n      type: RESET_SUCCESS,\n      payload: \"Check your inbox. We've sent you a secured reset link by e-mail.\"\n    })).catch(() => {\n      dispatch(apiCallError());\n      dispatch({\n        type: RESET_ERROR,\n        payload: \"Oops, something went wrong we couldn't send you the e-mail. Try again and if the error persists, contact admin.\"\n      });\n    });\n  } catch (err) {\n    dispatch(apiCallError());\n    dispatch({\n      type: RESET_ERROR,\n      payload: err\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/The-Amazing-App/web-app/src/store/actions/auth.js"],"names":["SIGNUP_SUCCESS","SIGNUP_ERROR","SIGNIN_SUCCESS","SIGNIN_ERROR","EMAIL_NOT_VERIFIED","SIGNOUT_SUCCESS","SIGNOUT_ERROR","RESET_SUCCESS","RESET_ERROR","beginApiCall","apiCallError","firebase","signup","email","password","username","dispatch","db","firestore","collection","auth","createUserWithEmailAndPassword","then","dataBeforeEmail","add","Username","Email","onAuthStateChanged","user","sendEmailVerification","dataAfterEmail","type","payload","catch","err","signin","callback","signInWithEmailAndPassword","data","emailVerified","console","log","signout","signOut","resetPassword","sendPasswordResetEmail"],"mappings":"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","sourcesContent":["import {\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_ERROR,\r\n  SIGNIN_SUCCESS,\r\n  SIGNIN_ERROR,\r\n  EMAIL_NOT_VERIFIED,\r\n  SIGNOUT_SUCCESS,\r\n  SIGNOUT_ERROR,\r\n  RESET_SUCCESS,\r\n  RESET_ERROR,\r\n} from \"./actionTypes\";\r\nimport { beginApiCall, apiCallError } from \"./apiStatus\";\r\nimport firebase from \"../../Config/fbConfig\";\r\n\r\n// Signing up with Firebase\r\nexport const signup = (email, password, username) => async (dispatch) => {\r\n  try {\r\n    dispatch(beginApiCall());\r\n    const db = firebase.firestore().collection(\"Users\");\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password, username)\r\n      .then((dataBeforeEmail) => {\r\n        db.add({\r\n          Username: username,\r\n          Email: email,\r\n        });\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n          user.sendEmailVerification();\r\n        });\r\n      })\r\n      .then((dataAfterEmail) => {\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n          if (user) {\r\n            // Sign up successful\r\n            dispatch({\r\n              type: SIGNUP_SUCCESS,\r\n              payload:\r\n                \"Your account was successfully created! Now you need to verify your e-mail address, please go check your inbox.\",\r\n            });\r\n          } else {\r\n            // Signup failed\r\n            dispatch({\r\n              type: SIGNUP_ERROR,\r\n              payload:\r\n                \"Something went wrong, we couldn't create your account. Please try again.\",\r\n            });\r\n          }\r\n        });\r\n      })\r\n      .catch(() => {\r\n        dispatch(apiCallError());\r\n        dispatch({\r\n          type: SIGNUP_ERROR,\r\n          payload:\r\n            \"Something went wrong, we couldn't create your account. Please try again.\",\r\n        });\r\n      });\r\n  } catch (err) {\r\n    dispatch(apiCallError());\r\n    dispatch({\r\n      type: SIGNUP_ERROR,\r\n      payload:\r\n        \"Something went wrong, we couldn't create your account. Please try again.\",\r\n    });\r\n  }\r\n};\r\n\r\n// Signing in with Firebase\r\nexport const signin = (email, password, callback) => async (dispatch) => {\r\n  try {\r\n    dispatch(beginApiCall());\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((data) => {\r\n        if (data.user.emailVerified) {\r\n          console.log(\"IF\", data.user.emailVerified);\r\n          dispatch({ type: SIGNIN_SUCCESS });\r\n          callback();\r\n        } else {\r\n          console.log(\"ELSE\", data.user.emailVerified);\r\n          dispatch({\r\n            type: EMAIL_NOT_VERIFIED,\r\n            payload: \"You haven't verified your e-mail address.\",\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        dispatch(apiCallError());\r\n        dispatch({\r\n          type: SIGNIN_ERROR,\r\n          payload: \"Invalid login credentials\",\r\n        });\r\n      });\r\n  } catch (err) {\r\n    dispatch(apiCallError());\r\n    dispatch({ type: SIGNIN_ERROR, payload: \"Invalid login credentials\" });\r\n  }\r\n};\r\n\r\n// Signing out with Firebase\r\nexport const signout = () => async (dispatch) => {\r\n  try {\r\n    dispatch(beginApiCall());\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch({ type: SIGNOUT_SUCCESS });\r\n      })\r\n      .catch(() => {\r\n        dispatch(apiCallError());\r\n        dispatch({\r\n          type: SIGNOUT_ERROR,\r\n          payload: \"Error, we were not able to log you out. Please try again.\",\r\n        });\r\n      });\r\n  } catch (err) {\r\n    dispatch(apiCallError());\r\n    dispatch({\r\n      type: SIGNOUT_ERROR,\r\n      payload: \"Error, we were not able to log you out. Please try again.\",\r\n    });\r\n  }\r\n};\r\n\r\n// Reset password with Firebase\r\nexport const resetPassword = (email) => async (dispatch) => {\r\n  try {\r\n    dispatch(beginApiCall());\r\n    firebase\r\n      .auth()\r\n      .sendPasswordResetEmail(email)\r\n      .then(() =>\r\n        dispatch({\r\n          type: RESET_SUCCESS,\r\n          payload:\r\n            \"Check your inbox. We've sent you a secured reset link by e-mail.\",\r\n        })\r\n      )\r\n      .catch(() => {\r\n        dispatch(apiCallError());\r\n        dispatch({\r\n          type: RESET_ERROR,\r\n          payload:\r\n            \"Oops, something went wrong we couldn't send you the e-mail. Try again and if the error persists, contact admin.\",\r\n        });\r\n      });\r\n  } catch (err) {\r\n    dispatch(apiCallError());\r\n    dispatch({ type: RESET_ERROR, payload: err });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}